import 'dart:convert';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_ai/firebase_ai.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:shimmer/shimmer.dart';
import 'package:nina/gallery_screen.dart';
import 'package:nina/login_screen.dart';
import 'package:nina/widgets/image_grid.dart';
import 'package:nina/widgets/settings_panel.dart';
import 'package:nina/widgets/critique_panel.dart';
import 'package:nina/widgets/stacked_image_preview.dart';

/// The main screen of the application, responsible for displaying the
/// image generation UI and the user's gallery.
class HomeScreen extends StatefulWidget {
  /// A callback to toggle the theme of the application.
  final VoidCallback toggleTheme;

  /// Creates a new [HomeScreen] instance.
  const HomeScreen({super.key, required this.toggleTheme});

  @override
  HomeScreenState createState() => HomeScreenState();
}

/// The state for the [HomeScreen].
class HomeScreenState extends State<HomeScreen> {
  /// The currently logged in user.
  User? _user;

  /// The currently selected Imagen model.
  String _selectedModel = 'imagen-4.0-fast-generate-001';

  /// The currently selected aspect ratio for image generation.
  String _selectedAspectRatio = '1:1';

  /// The number of images to generate.
  double _numberOfImages = 3;

  /// The controller for the prompt text field.
  final TextEditingController _promptController = TextEditingController();

  /// The list of generated images.
  List<Uint8List> _generatedImages = [];

  /// The layout for the generated images.
  ImageLayout _imageLayout = ImageLayout.quiltedContain;

  /// The currently selected editorial style.
  String _selectedStyle = 'Fashion';

  /// The currently selected city for the editorial style.
  String? _selectedCity = 'New York';

  /// A list of creative prompts generated by the model.
  List<Map<String, String>> _creativePrompts = [];

  /// Whether the creative prompts are currently being generated.
  bool _isGeneratingPrompts = false;

  /// The structured critique generated by the model.
  Map<String, dynamic>? _structuredCritique;

  /// Whether to show the aesthetic scores on the images.
  bool _showAestheticScores = true;

  /// The current page of the [PageView].
  int _currentPage = 0;

  /// Whether the image generation is in progress.
  bool _isLoading = false;

  /// The controller for the [PageView].
  late PageController _pageController;

  @override
  void initState() {
    super.initState();
    _user = FirebaseAuth.instance.currentUser;
    _pageController = PageController();
  }

  /// Shows an error dialog with the given [title] and [message].
  Future<void> _showErrorDialog(String title, String message) async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false, // user must tap button!
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(title),
          content: SingleChildScrollView(
            child: ListBody(children: <Widget>[Text(message)]),
          ),
          actions: <Widget>[
            TextButton(
              child: const Text('OK'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  /// Converts a string [ratio] to an [ImagenAspectRatio].
  ImagenAspectRatio _getAspectRatio(String ratio) {
    switch (ratio) {
      case '1:1':
        return ImagenAspectRatio.square1x1;
      case '3:4':
        return ImagenAspectRatio.portrait3x4;
      case '4:3':
        return ImagenAspectRatio.landscape4x3;
      case '9:16':
        return ImagenAspectRatio.portrait9x16;
      case '16:9':
        return ImagenAspectRatio.landscape16x9;
      default:
        return ImagenAspectRatio.square1x1;
    }
  }

  /// Uploads an image to Firebase Storage and returns the download URL.
  Future<String> _uploadImage(Uint8List imageBytes) async {
    final storageRef = FirebaseStorage.instance.ref();
    final imageName =
        'editorial-look/${DateTime.now().millisecondsSinceEpoch}.png';
    final imageRef = storageRef.child(imageName);
    await imageRef.putData(imageBytes);
    return await imageRef.getDownloadURL();
  }

  /// Returns a user-friendly error message for the given [e]xception.
  String _getFriendlyErrorMessage(dynamic e) {
    if (e is FirebaseException) {
      return 'An error occurred with Firebase: ${e.message}';
    }
    return 'An unexpected error occurred. Please try again.';
  }

  /// Generates an image using the Imagen model and uploads it to Firebase Storage.
  Future<void> _generateImagesAndCritique() async {
    if (_promptController.text.isEmpty) {
      return;
    }

    if (!mounted) return;
    setState(() {
      _isLoading = true;
      _generatedImages = [];
      _structuredCritique = null;
    });

    try {
      // 1. Generate images
      debugPrint('Starting image generation...');
      final ai = FirebaseAI.vertexAI(location: 'us-central1');
      final model = ai.imagenModel(
        model: _selectedModel,
        generationConfig: ImagenGenerationConfig(
          numberOfImages: _numberOfImages.toInt(),
          aspectRatio: _getAspectRatio(_selectedAspectRatio),
        ),
      );
      final response = await model.generateImages(_promptController.text);
      final imageBytesList = response.images
          .map((e) => e.bytesBase64Encoded)
          .toList();

      if (imageBytesList.isEmpty) {
        _showErrorDialog('Error Generating Image', 'No images were generated.');
        return;
      }

      // 2. Generate critique
      debugPrint('Starting critique generation...');
      final critiqueModel = FirebaseAI.vertexAI().generativeModel(
        model: 'gemini-2.5-flash',
        generationConfig: GenerationConfig(
          responseMimeType: 'application/json',
        ),
      );
      final critiquePrompt =
          '''
        You're a friendly visual magazine editor who loves AI generated images with Imagen 4, Google's latest image generation model whose quality exceeds all leading external competitors in aesthetics, defect-free, and text image alignment. You are always friendly and positive and not shy to provide critiques with delightfully cheeky, clever streak. You've been presented with these images for your thoughts.

        The prompt used by the author to create these images was: "${_promptController.text}"
            
        Return a JSON object with the following structure:
        {
          "intro": "...",
          "image_critiques": [
            {
              "critique": "...",
              "aesthetic_score": "..."
            }
          ],
          "closing": "..."
        }
      ''';
      final imageParts = imageBytesList.map((imageBytes) {
        return InlineDataPart('image/png', imageBytes);
      }).toList();
      final critiqueResponse = await critiqueModel.generateContent([
        Content.multi([TextPart(critiquePrompt), ...imageParts]),
      ]);

      Map<String, dynamic>? structuredCritique;
      if (critiqueResponse.text != null) {
        try {
          structuredCritique =
              jsonDecode(critiqueResponse.text!) as Map<String, dynamic>;
        } catch (e) {
          debugPrint('Error parsing JSON response from Gemini:');
          debugPrint(critiqueResponse.text);
        }
      }

      // 3. Upload images and save to Firestore
      debugPrint('Uploading images...');
      final imageUrls = <String>[];
      for (final imageBytes in imageBytesList) {
        final imageUrl = await _uploadImage(imageBytes);
        imageUrls.add(imageUrl);
      }

      await FirebaseFirestore.instance.collection('lookbook').add({
        'imageUrls': imageUrls,
        'prompt': _promptController.text,
        'uid': _user!.uid,
        'userName': _user!.displayName,
        'userEmail': _user!.email,
        'createdAt': FieldValue.serverTimestamp(),
        'style': _selectedStyle,
        'city': _selectedCity,
        'model': _selectedModel,
        'aspectRatio': _selectedAspectRatio,
        'presetCategory': '', // Kept for future use
        'geminiCategory': '', // Kept for future use
        'geminiRating': '', // Kept for future use
        'editorialCritique': structuredCritique,
      });

      // 4. Update state once with all new data
      if (!mounted) return;
      setState(() {
        _generatedImages = imageBytesList;
        _structuredCritique = structuredCritique;
        _isLoading = false;
      });
    } catch (e) {
      debugPrint('An error occurred: $e');
      if (!mounted) return;
      _showErrorDialog('An Error Occurred', _getFriendlyErrorMessage(e));
      if (!mounted) return;
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// Generates creative prompts using the Gemini model.
  Future<void> _generateCreativePrompts() async {
    if (!mounted) return;
    setState(() {
      _isGeneratingPrompts = true;
      _creativePrompts = [];
    });

    try {
      final model = FirebaseAI.vertexAI().generativeModel(
        model: 'gemini-2.5-flash',
      );
      final prompt =
          '''
        Generate 3-5 creative prompts for images a model shoot that has grain, cinematic, warm lights, etc.
        The editorial style is "$_selectedStyle" and the background location is "$_selectedCity".
        Be specific about editorial locations within the city chosen to add detail and color to the photo shoot, mentioning the area within the city. Utilize the editorial style to determine the additional qualities of what the photo should look like. You may mention a magazine's name as a reference style.

        Return the response as a valid JSON array where each object has a "title" and a "prompt" key.

        Example (Fashion: Vogue, City: New York):
        [
          {
            "title": "SoHo Cobblestones & Cast Iron",
            "prompt": "A high fashion editorial photograph of a model walking down a cobblestone street in SoHo, New York. She wears an avant-garde trench coat. The shot is cinematic, with a noticeable grainy texture, capturing the warm, golden hour light reflecting off the cast-iron buildings. The mood is candid and effortlessly chic, reminiscent of a 90s Vogue photoshoot."
          }
        ]
      ''';

      final response = await model.generateContent([Content.text(prompt)]);

      if (!mounted) return;
      if (response.text != null) {
        try {
          // The response is often wrapped in markdown, so we need to clean it.
          final cleanJson = response.text!
              .replaceAll('```json\n', '')
              .replaceAll('```', '')
              .trim();
          final decoded = jsonDecode(cleanJson) as List<dynamic>;
          setState(() {
            _isGeneratingPrompts = true;
            _creativePrompts = decoded
                .map(
                  (e) => {
                    'title': e['title'] as String,
                    'prompt': e['prompt'] as String,
                  },
                )
                .toList();
          });
        } catch (e) {
          debugPrint('Error parsing JSON response from Gemini:');
          debugPrint(response.text);
          if (!mounted) return;
          _showErrorDialog(
            'Error Parsing Response',
            'The model returned an unexpected response. Please try again.\n\nError: $e',
          );
        }
      } else {
        _showErrorDialog('Error', 'Failed to generate creative prompts.');
      }
    } catch (e) {
      _showErrorDialog('Error Generating Prompts', e.toString());
    }
    if (!mounted) return;
    setState(() {
      _isGeneratingPrompts = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).colorScheme.surface,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Row(
          children: [
            SvgPicture.string(
              '''
              <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                <g clip-path="url(#clip0_6_330)">
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M24 0.757355L47.2426 24L24 47.2426L0.757355 24L24 0.757355\nZM21 35.7574V12.2426L9.24264 24L21 35.7574Z"
                    fill="currentColor"
                  ></path>
                </g>
                <defs>
                  <clipPath id="clip0_6_330"><rect width="48" height="48" fill="white"></rect></clipPath>
                </defs>
              </svg>
              ''',
              width: 24,
              height: 24,
              colorFilter: ColorFilter.mode(
                Theme.of(context).colorScheme.onSurface,
                BlendMode.srcIn,
              ),
            ),
            const SizedBox(width: 8),
            Text(
              'Editorial Look',
              style: TextStyle(
                color: Theme.of(context).colorScheme.onSurface,
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(width: 32),
            TextButton(
              onPressed: () {},
              child: Text(
                'Create',
                style: TextStyle(
                  color: Theme.of(context).colorScheme.onSurface,
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
            const SizedBox(width: 16),
            TextButton(
              onPressed: () {
                Navigator.of(context).push(
                  MaterialPageRoute(
                    builder: (context) =>
                        GalleryScreen(toggleTheme: widget.toggleTheme),
                  ),
                );
              },
              child: Text(
                'Gallery',
                style: TextStyle(
                  color: Theme.of(context).colorScheme.onSurface,
                  fontSize: 14,
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
          ],
        ),
        actions: [
          IconButton(
            onPressed: widget.toggleTheme,
            icon: Icon(
              Theme.of(context).brightness == Brightness.dark
                  ? Icons.light_mode
                  : Icons.dark_mode,
              color: Theme.of(context).colorScheme.onSurface,
            ),
          ),
          if (_user?.photoURL != null)
            Padding(
              padding: const EdgeInsets.only(right: 16.0),
              child: PopupMenuButton<String>(
                onSelected: (value) {
                  if (value == 'logout') {
                    FirebaseAuth.instance.signOut().then((_) {
                      if (!mounted) return;
                      // ignore: use_build_context_synchronously
                      Navigator.of(context).pushReplacement(
                        MaterialPageRoute(
                          builder: (context) =>
                              LoginScreen(toggleTheme: widget.toggleTheme),
                        ),
                      );
                    });
                  }
                },
                itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
                  const PopupMenuItem<String>(
                    value: 'logout',
                    child: Text('Logout'),
                  ),
                ],
                child: CircleAvatar(
                  backgroundImage: CachedNetworkImageProvider(_user!.photoURL!),
                  onBackgroundImageError: (exception, stackTrace) {
                    debugPrint('Error loading image: $exception');
                  },
                  child: (_user?.photoURL == null || _user!.photoURL!.isEmpty)
                      ? Text(_user!.displayName![0])
                      : null,
                ),
              ),
            ),
        ],
      ),
      body: Row(
        children: [
          Expanded(
            flex: 3,
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        child: TextField(
                          controller: _promptController,
                          style: TextStyle(
                            color: Theme.of(context).colorScheme.onSurface,
                          ),
                          maxLines: 3,
                          decoration: InputDecoration(
                            hintText: 'Enter your prompt',
                            hintStyle: TextStyle(
                              color: Theme.of(
                                context,
                              ).colorScheme.onSurface.withAlpha(128),
                            ),
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.all(
                                Radius.circular(8.0),
                              ),
                              borderSide: BorderSide.none,
                            ),
                            fillColor: Theme.of(context).colorScheme.surface,
                            filled: true,
                          ),
                        ),
                      ),
                      const SizedBox(width: 16),
                      ElevatedButton(
                        onPressed: _generateImagesAndCritique,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Theme.of(
                            context,
                          ).colorScheme.primary,
                          foregroundColor: Theme.of(
                            context,
                          ).colorScheme.onPrimary,
                        ),
                        child: Text('Generate'),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  Wrap(
                    spacing: 8.0,
                    runSpacing: 4.0,
                    children: [
                      if (_selectedCity != null)
                        Chip(
                          avatar: const Icon(Icons.location_city),
                          label: Text(_selectedCity!),
                        ),
                      Chip(
                        avatar: const Icon(Icons.style),
                        label: Text(_selectedStyle),
                      ),
                      if (_isGeneratingPrompts)
                        Shimmer.fromColors(
                          baseColor: Colors.grey[300]!,
                          highlightColor: Colors.grey[100]!,
                          child: Wrap(
                            spacing: 8.0,
                            runSpacing: 4.0,
                            children: List.generate(
                              3,
                              (_) => const Chip(label: Text('          ')),
                            ),
                          ),
                        )
                      else
                        ..._creativePrompts.map(
                          (prompt) => TextButton(
                            onPressed: () {
                              _promptController.text = prompt['prompt']!;
                            },
                            child: Text(prompt['title']!),
                          ),
                        ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Expanded(
                          child: Stack(
                            children: [
                              Visibility(
                                visible:
                                    _imageLayout == ImageLayout.standardGrid,
                                child: PageView.builder(
                                  controller: _pageController,
                                  itemCount: _generatedImages.length,
                                  onPageChanged: (index) {
                                    setState(() {
                                      _currentPage = index;
                                    });
                                  },
                                  itemBuilder: (context, index) {
                                    final imageCritiques =
                                        _structuredCritique?['image_critiques']
                                            as List<dynamic>?;
                                    final aestheticScore =
                                        (_showAestheticScores &&
                                            imageCritiques != null &&
                                            index < imageCritiques.length)
                                        ? imageCritiques[index]['aesthetic_score']
                                              as String?
                                        : null;

                                    return Stack(
                                      fit: StackFit.expand,
                                      children: [
                                        Image.memory(
                                          _generatedImages[index],
                                          fit: BoxFit.contain,
                                        ),
                                        if (aestheticScore != null)
                                          Positioned(
                                            bottom: 8,
                                            right: 8,
                                            child: Chip(
                                              label: Text(aestheticScore),
                                              backgroundColor: Colors.black
                                                  .withAlpha(128),
                                              labelStyle: const TextStyle(
                                                color: Colors.white,
                                              ),
                                            ),
                                          ),
                                      ],
                                    );
                                  },
                                ),
                              ),
                              Visibility(
                                visible:
                                    _imageLayout != ImageLayout.standardGrid,
                                child: ImageGrid(
                                  isLoading: _isLoading,
                                  layout: _imageLayout,
                                  generatedImages: _generatedImages,
                                  numberOfImages: _numberOfImages,
                                  selectedAspectRatio: _selectedAspectRatio,
                                  structuredCritique: _structuredCritique,
                                  showAestheticScores: _showAestheticScores,
                                ),
                              ),
                              Positioned(
                                top: 8,
                                right: 8,
                                child: Container(
                                  decoration: BoxDecoration(
                                    color: Colors.black.withOpacity(0.5),
                                    borderRadius: BorderRadius.circular(20),
                                  ),
                                  child: IconButton(
                                    onPressed: () {
                                      setState(() {
                                        _imageLayout = ImageLayout.values[
                                            (_imageLayout.index + 1) %
                                                ImageLayout.values.length];
                                      });
                                    },
                                    icon: Icon(
                                      _imageLayout ==
                                              ImageLayout.quiltedContain
                                          ? Icons.view_quilt_outlined
                                          : _imageLayout ==
                                                  ImageLayout.quiltedCover
                                              ? Icons.view_quilt
                                              : Icons.grid_view,
                                      color: Colors.white,
                                    ),
                                  ),
                                ),
                              ),
                              if (_isLoading &&
                                  _imageLayout == ImageLayout.standardGrid)
                                Center(child: CircularProgressIndicator()),
                              if (_generatedImages.length > 1 &&
                                  _imageLayout == ImageLayout.standardGrid)
                                Positioned(
                                  bottom: 16,
                                  left: 0,
                                  right: 0,
                                  child: Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      IconButton(
                                        onPressed: () {
                                          if (_pageController.hasClients) {
                                            _pageController.previousPage(
                                              duration: Duration(
                                                milliseconds: 300,
                                              ),
                                              curve: Curves.easeInOut,
                                            );
                                          }
                                        },
                                        icon: Icon(Icons.arrow_back_ios),
                                      ),
                                      ...List.generate(
                                        _generatedImages.length,
                                        (index) => Container(
                                          width: 8,
                                          height: 8,
                                          margin: const EdgeInsets.symmetric(
                                            horizontal: 4,
                                          ),
                                          decoration: BoxDecoration(
                                            shape: BoxShape.circle,
                                            color: _currentPage == index
                                                ? Colors.white
                                                : Colors.white.withAlpha(128),
                                          ),
                                        ),
                                      ),
                                      IconButton(
                                        onPressed: () {
                                          if (_pageController.hasClients) {
                                            _pageController.nextPage(
                                              duration: Duration(
                                                milliseconds: 300,
                                              ),
                                              curve: Curves.easeInOut,
                                            );
                                          }
                                        },
                                        icon: Icon(Icons.arrow_forward_ios),
                                      ),
                                    ],
                                  ),
                                ),
                            ],
                          ),
                        ),
                        const SizedBox(height: 16),
                        Text(
                          'Latest Looks',
                          style: TextStyle(
                            fontSize: 22,
                            fontWeight: FontWeight.bold,
                            color: Theme.of(context).colorScheme.onSurface,
                          ),
                        ),
                        const SizedBox(height: 16),
                        SizedBox(
                          height: 150,
                          child: StreamBuilder<QuerySnapshot>(
                            stream: FirebaseFirestore.instance
                                .collection('lookbook')
                                .where('uid', isEqualTo: _user!.uid)
                                .orderBy('createdAt', descending: true)
                                .snapshots(),
                            builder: (context, snapshot) {
                              if (snapshot.connectionState ==
                                  ConnectionState.waiting) {
                                return Center(
                                  child: CircularProgressIndicator(),
                                );
                              }
                              if (snapshot.hasError) {
                                return Center(
                                  child: Text('Error: ${snapshot.error}'),
                                );
                              }
                              if (!snapshot.hasData ||
                                  snapshot.data!.docs.isEmpty) {
                                return Center(
                                  child: Text('No saved images yet.'),
                                );
                              }

                              final documents = snapshot.data!.docs;
                              return ListView.builder(
                                scrollDirection: Axis.horizontal,
                                itemCount: documents.length,
                                itemBuilder: (context, index) {
                                  final doc = documents[index];
                                  return Padding(
                                    padding: const EdgeInsets.only(right: 16.0),
                                    child: SizedBox(
                                      width: 150,
                                      child: Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          AspectRatio(
                                            aspectRatio: 1,
                                            child: ClipRRect(
                                              borderRadius:
                                                  BorderRadius.circular(8.0),
                                              child: StackedImagePreview(
                                                key: Key(doc.id),
                                                imageUrls: List<String>.from(
                                                  doc['imageUrls'],
                                                ),
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  );
                                },
                              );
                            },
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          Expanded(
            flex: 1,
            child: Card(
              elevation: 0,
              color: const Color(0xFFF4E7E7),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                children: [
                  Expanded(
                    child: SettingsPanel(
                      selectedModel: _selectedModel,
                      selectedAspectRatio: _selectedAspectRatio,
                      numberOfImages: _numberOfImages,
                      selectedStyle: _selectedStyle,
                      selectedCity: _selectedCity,
                      isGeneratingPrompts: _isGeneratingPrompts,
                      onModelChanged: (value) {
                        setState(() {
                          _selectedModel = value!;
                        });
                      },
                      onAspectRatioChanged: (value) {
                        setState(() {
                          _selectedAspectRatio = value!;
                        });
                      },
                      onNumberOfImagesChanged: (value) {
                        setState(() {
                          _numberOfImages = value;
                        });
                      },
                      onStyleChanged: (value) {
                        setState(() {
                          _selectedStyle = value;
                        });
                      },
                      onCityChanged: (value) {
                        setState(() {
                          _selectedCity = value!;
                        });
                      },
                      onGeneratePrompts: _generateCreativePrompts,
                    ),
                  ),
                  Divider(
                    height: 1,
                    color: Theme.of(
                      context,
                    ).colorScheme.onSurface.withAlpha(26),
                  ),
                  Expanded(
                    child: CritiquePanel(
                      structuredCritique: _structuredCritique,
                      showAestheticScores: _showAestheticScores,
                      onShowAestheticScoresChanged: (value) {
                        setState(() {
                          _showAestheticScores = value;
                        });
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
